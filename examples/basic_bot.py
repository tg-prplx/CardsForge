"""–ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CardForge."""

from __future__ import annotations

import random
from pathlib import Path

from cardforge import BotApp, CardForgeConfig
from cardforge.diagnostics.economy_simulator import EconomySimulator
from cardforge.loaders import load_catalog_from_json
from cardforge.registry import MiniGame


async def coinflip_game(context) -> None:
    await context.send_message("ü™ô –ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –º–æ–Ω–µ—Ç–∫—É...")
    if random.choice(["heads", "tails"]) == "heads":
        await context.send_message("–û—Ä—ë–ª! –ü–æ–ª—É—á–∞–µ—à—å 10 –º–æ–Ω–µ—Ç –∏ 5 –æ–ø—ã—Ç–∞.")
        await context.award_currency("coins", 10)
        await context.grant_experience(5)
    else:
        await context.send_message("–†–µ—à–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


def register(app: BotApp) -> None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç—ã, –ø–∞–∫–∏, –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –º–∏–Ω–∏-–∏–≥—Ä—ã."""
    catalog_path = Path(__file__).with_name("catalog") / "cards.json"
    load_catalog_from_json(app, catalog_path)

    app.config.admin.commands.grant_card = "giftcard"

    app.mini_games.register(
        MiniGame(
            game_id="coinflip",
            name="–ú–æ–Ω–µ—Ç–∫–∞",
            description="–£–≥–∞–¥–∞–π –∏—Å—Ö–æ–¥ –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É.",
            command="coinflip",
            handler=coinflip_game,
        )
    )


def simulate() -> None:
    config = CardForgeConfig.from_env()
    app = BotApp(config)
    register(app)
    simulator = EconomySimulator(app)
    result = simulator.simulate("starters", pulls=100)
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {result.uniques}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result.duplicates}")


if __name__ == "__main__":
    simulate()
